var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/prologue/introduction/",title:"Introduction",description:"Ludwig is a lazy functional logic programming language designed to compose and play music.",content:`Getting started # The easiest way to play with Ludwig is through the playground.
If you\u0026rsquo;d like to build Ludwig from source, clone the source and build the project using the luwig npm script, my tests in particular were done on macOS using npm v9.4.0 and node v19.6.1.
git clone git@github.com:fuzzypixelz/jam0004.git cd ludwig npm run ludwig open dest/index.html Next, webpack should generate the build files under dest/. Simply open the index.html with your browser of choice (Chromium-based browsers are recommended).
Rationale # Ludwig is Innf107 and fuzzypixelz\u0026rsquo; submission for the 4th Lang Jam. This edition\u0026rsquo;s theme is:
The sound(ness) of one hand typing
At first we thought of making a language where all tokens can be typed using only one side of the keyboard — we would quickly get disenchanted with this idea. After a fair bit of Brainstorming™ we thought of making a language which plays musical notes while de-duplicating notes of the same pitch (more on this later).
We then decided to design Ludwig as a lazy functional logic programming language on the browser.
`}),e.add({id:1,href:"/docs/prologue/",title:"Prologue",description:"Prologue of Ludwig documentation.",content:""}),e.add({id:2,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()